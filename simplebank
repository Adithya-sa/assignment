// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleBank {
    mapping(address => uint256) private balances;

    event Deposit(address indexed account, uint256 amount);
    event Withdrawal(address indexed account, uint256 amount);

    modifier greaterThanZero(uint256 _amount) {
        require(_amount > 0, "Amount must be greater than zero.");
        _;
    }

    modifier sufficientBalance(uint256 _amount) {
        require(_amount <= balances[msg.sender], "Insufficient balance.");
        _;
    }

    function deposit() public payable greaterThanZero(msg.value) {
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 _amount) public greaterThanZero(_amount) sufficientBalance(_amount) {
        balances[msg.sender] -= _amount;
        payable(msg.sender).transfer(_amount);
        emit Withdrawal(msg.sender, _amount);
    }

    function getBalance() public view returns (uint256) {
        return balances[msg.sender];
    }
}
